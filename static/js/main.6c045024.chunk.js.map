{"version":3,"sources":["components/DisplayData.js","components/ButtonsController.js","components/MessageElement.js","components/DisplayBoard.js","components/App.js","index.js"],"names":["DisplayData","props","react_default","a","createElement","Fragment","numberOfElements","ButtonsController","onClick","clickReset","MessageElement","element","title","body","DisplayBoard","messages","displayMessages","map","components_MessageElement","key","id","console","log","className","reverse","externalData","setInterval","index","length","newObj","concat","push","App","intervalIndex","state","Object","toConsumableArray","checkExternalSource","_this","setState","handleReset","this","components_DisplayData","components_ButtonsController","components_DisplayBoard","Component","ReactDOM","render","src_components_App","document","getElementById"],"mappings":"gOAWeA,SATK,SAACC,GACnB,OACEC,EAAAC,EAAAC,cAACF,EAAAC,EAAME,SAAP,KACEH,EAAAC,EAAAC,cAAA,+BACAF,EAAAC,EAAAC,cAAA,iCAAwBF,EAAAC,EAAAC,cAAA,YAAOH,EAAMK,sBCI5BC,EARW,SAACN,GACzB,OACEC,EAAAC,EAAAC,cAAA,UACEI,QAASP,EAAMQ,YADjB,UCSWC,EAXQ,SAACT,GAAU,IACxBU,EAAYV,EAAZU,QAER,OACET,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,UAAKO,EAAQC,OACbV,EAAAC,EAAAC,cAAA,SAAIO,EAAQE,QCaHC,EAlBM,SAACb,GAAU,IACtBc,EAAad,EAAbc,SAEFC,EAAkBD,EAASE,IAAI,SAAAN,GAAO,OAC1CT,EAAAC,EAAAC,cAACc,EAAD,CACEC,IAAKR,EAAQS,GACbT,QAASA,MAGb,OADAU,QAAQC,IAAIP,GAEVb,EAAAC,EAAAC,cAAA,OAAKmB,UAAU,SACbrB,EAAAC,EAAAC,cAAA,UACGY,EAAgBQ,aCTrBC,EAAe,GAEnBC,YAAY,WACV,IAAMC,EAAQF,EAAaG,OACrBC,EAAS,CAAET,GAAIO,EAAOf,MAAK,cAAAkB,OAAgBH,GAASd,KAAI,0BAAAiB,OAA4BH,IAC1FF,EAAaM,KAAKF,IACjB,SA6CYG,6MA1CbC,cAAgB,OAChBC,MAAQ,CACNnB,SAASoB,OAAAC,EAAA,EAAAD,CAAKV,MAOhBY,oBAAsB,WAChBC,EAAKJ,MAAMnB,SAASa,SAAWH,EAAaG,QAC9CU,EAAKC,SAAS,CACZxB,SAASoB,OAAAC,EAAA,EAAAD,CAAKV,QAKpBe,YAAc,WACZf,EAAe,GACfa,EAAKC,SAAS,CACZxB,SAAU,yFAdZ0B,KAAKR,cAAgBP,YAAYe,KAAKJ,oBAAqB,sCAmB3D,OACEnC,EAAAC,EAAAC,cAAA,OAAKmB,UAAU,OACbrB,EAAAC,EAAAC,cAACsC,EAAD,CACEpC,iBAAkBmC,KAAKP,MAAMnB,SAASa,SAExC1B,EAAAC,EAAAC,cAACuC,EAAD,CACElC,WAAYgC,KAAKD,cAEnBtC,EAAAC,EAAAC,cAACwC,EAAD,CACE7B,SAAU0B,KAAKP,MAAMnB,mBAnCb8B,aCTlBC,IAASC,OAAO7C,EAAAC,EAAAC,cAAC4C,EAAD,MAASC,SAASC,eAAe","file":"static/js/main.6c045024.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst DisplayData = (props) => {\r\n  return (\r\n    <React.Fragment>\r\n      <h2>External data app</h2>\r\n      <h3>Number of messages: <span>{props.numberOfElements}</span></h3>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default DisplayData;","import React from 'react';\r\n\r\nconst ButtonsController = (props) => {\r\n  return (\r\n    <button\r\n      onClick={props.clickReset}\r\n    >Reset</button>\r\n  );\r\n}\r\n\r\nexport default ButtonsController;","import React from 'react';\r\n\r\nconst MessageElement = (props) => {\r\n  const { element } = props;\r\n\r\n  return (\r\n    <li>\r\n      <h4>{element.title}</h4>\r\n      <p>{element.body}</p>\r\n    </li>\r\n  );\r\n}\r\n\r\nexport default MessageElement;","import React from 'react';\r\nimport MessageElement from './MessageElement';\r\n\r\nconst DisplayBoard = (props) => {\r\n  const { messages } = props;\r\n\r\n  const displayMessages = messages.map(element =>\r\n    <MessageElement\r\n      key={element.id}\r\n      element={element} />)\r\n\r\n  console.log(messages);\r\n  return (\r\n    <div className=\"board\">\r\n      <ul>\r\n        {displayMessages.reverse()}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DisplayBoard;","import React, { Component } from 'react';\nimport './App.css';\nimport DisplayData from './DisplayData';\nimport ButtonsController from './ButtonsController';\nimport DisplayBoard from './DisplayBoard';\n\nlet externalData = []\n\nsetInterval(() => {\n  const index = externalData.length;\n  const newObj = { id: index, title: `message nr ${index}`, body: `this is message number ${index}` };\n  externalData.push(newObj);\n}, 3000);\n\nclass App extends Component {\n  intervalIndex = null;\n  state = {\n    messages: [...externalData]\n  }\n\n  componentDidMount() {\n    this.intervalIndex = setInterval(this.checkExternalSource, 2000);\n  }\n\n  checkExternalSource = () => {\n    if (this.state.messages.length !== externalData.length) {\n      this.setState({\n        messages: [...externalData]\n      })\n    }\n  }\n\n  handleReset = () => {\n    externalData = [];\n    this.setState({\n      messages: [],\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <DisplayData\n          numberOfElements={this.state.messages.length}\n        />\n        <ButtonsController\n          clickReset={this.handleReset}\n        />\n        <DisplayBoard\n          messages={this.state.messages}\n        />\n\n      </div>\n    );\n  }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}